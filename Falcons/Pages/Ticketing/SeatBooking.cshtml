@page
@model Falcons.Pages.Ticketing.SeatBookingModel
@section styles{
    <link href='https://fonts.googleapis.com/css?family=Lato:400,700' rel='stylesheet' type='text/css'>
    <link href="~/jQuery-Seat-Chart/jquery.seat-charts.css" rel="stylesheet" />
}
@{
    ViewData["Title"] = "SeatBooking";
}

<section>
    <div class="section-title" style="margin-top: 20px;">
        <h4>Your Ticket Details</h4>
    </div>
</section>

<section>
    <div class="seat">

        <div class="container" style="margin-top: 20px;">
            <div style="text-align:center;">Screen Here</div>
            <div style="background-color: dimgray; height: 10px; width:80%; margin:auto; box-shadow: 0 3px 10px rgba(255, 255, 255, 0.7); align-content:center;"> </div>
        </div>
    </div>

    <div class="d-flex justify-content-center align-content-center">
        <div class="wrapper">

            <div class="container-fluid">

                <div id="seat-map" style="margin-top: 50px;">
                </div>

                <div class="booking-details">

                </div>

            </div>
        </div>
    </div>

</section>

@section Scripts{

    <script src="~/jQuery-Seat-Chart/jquery.seat-charts.js"></script>

    <script>
    var firstSeatLabel = 1;

        $(document).ready(function () {
            var $cart = $('#selected-seats'),
                $counter = $('#counter'),
                $total = $('#total'),
                sc = $('#seat-map').seatCharts({
                    map: [
                        'nnnnnnnnnnnnn',
                        'nnnnnnnnnnnnn',
                        'nnnnnnnnnnnnn',
                        'nnnnnnnnnnnnn',
                        'ccccccccccccc'
                    ],
                    seats: {
                        n: {
                            //price: 14,
                            classes: 'normal-ticket', //your custom CSS class
                            category: 'Adult'
                        },

                        c: {
                            //price: 25,
                            classes: 'twin-seat',
                            category: 'Twin Seat'
                        }

                    },
                    naming: {
                        top: false,
                        getLabel: function (character, row, column) {
                            return firstSeatLabel++;
                        },
                    },
                    legend: {
                        node: $('#legend'),
                        items: [
                            ['f', 'available', 'Adult Ticket'],
                            ['f', 'unavailable', 'Sold']
                        ]
                    },
                    click: function () {
                        if (this.status() == 'available') {
                            //let's create a new <li> which we'll add to the cart items
                            $('<li>' + this.data().category + ' Seat # ' + this.settings.label + ': <b>RM ' + this.data().price + '</b> <a href="#" class="cancel-cart-item">[cancel]</a></li>')
                                .attr('id', 'cart-item-' + this.settings.id)
                                .data('seatId', this.settings.id)
                                .data('seatPrice', this.data().price)
                                .appendTo($cart);

                            /*
                             * Lets update the counter and total
                             *
                             * .find function will not find the current seat, because it will change its stauts only after return
                             * 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
                             */
                            $counter.text(sc.find('selected').length + 1);
                            $total.text(recalculateTotal(sc) + this.data().price);

                            return 'selected';
                        } else if (this.status() == 'selected') {
                            //update the counter
                            $counter.text(sc.find('selected').length - 1);
                            //and total
                            $total.text(recalculateTotal(sc) - this.data().price);

                            //remove the item from our cart
                            $('#cart-item-' + this.settings.id).remove();

                            //seat has been vacated
                            return 'available';
                        } else if (this.status() == 'unavailable') {
                            //seat has been already booked
                            return 'unavailable';
                        } else {
                            return this.style();
                        }
                    }
                });

            //this will handle "[cancel]" link clicks
            $('#selected-seats').on('click', '.cancel-cart-item', function () {
                //let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
                sc.get($(this).parents('li:first').data('seatId')).click();
            });

            //let's pretend some seats have already been booked
            //sc.get(['1_2', '4_1', '7_1', '7_2']).status('unavailable');
            @*sc.get(@Html.Raw(SerializedBookedIDs)).status('unavailable');*@

        });

        function recalculateTotal(sc) {
            var total = 0;

            //basically find every selected seat and sum its price
            sc.find('selected').each(function () {
                total += this.data().price;
            });

            return total;
        }

    </script>

    <script>
        $(document).ready(function () {
            $(".hidethisclass").hide();
        });

    </script>

}